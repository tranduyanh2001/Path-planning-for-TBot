#include <ros/ros.h>
#include <stdio.h>
#include <cmath>
#include <errno.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PointStamped.h>
#include <geometry_msgs/Twist.h>
#include <std_msgs/Empty.h>
#include <fstream>
#include "common.hpp"

bool target_changed = false;
Position target;
void cbTarget(const geometry_msgs::PointStamped::ConstPtr &msg)
{
    target.x = msg->point.x;
    target.y = msg->point.y;
}

Position pos_rbt(0, 0);
double ang_rbt = 10; // set to 10, because ang_rbt is between -pi and pi, and integer for correct comparison while waiting for motion to load
void cbPose(const geometry_msgs::PoseStamped::ConstPtr &msg)
{
    auto &p = msg->pose.position;
    pos_rbt.x = p.x;
    pos_rbt.y = p.y;

    // euler yaw (ang_rbt) from quaternion <-- stolen from wikipedia
    auto &q = msg->pose.orientation; // reference is always faster than copying. but changing it means changing the referenced object.
    double siny_cosp = 2 * (q.w * q.z + q.x * q.y);
    double cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
    ang_rbt = atan2(siny_cosp, cosy_cosp);
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "turtle_move");
    ros::NodeHandle nh;

    std::ofstream data_file;
    data_file.open("/home/sonia/a084rnew_/data_lin.ods");
    //data_file.open("/home/sonia/a084rnew_/data_ang.ods");

    // Get ROS Parameters
    bool enable_move;
    if (!nh.param("enable_move", enable_move, true))
        ROS_WARN(" TMOVE : Param enable_move not found, set to true");
    bool verbose;
    if (!nh.param("verbose_move", verbose, false))
        ROS_WARN(" TMOVE : Param verbose_move not found, set to false");
    double Kp_lin;
    if (!nh.param("Kp_lin", Kp_lin, 1.0))
        ROS_WARN(" TMOVE : Param Kp_lin not found, set to 1.0");
    double Ki_lin;
    if (!nh.param("Ki_lin", Ki_lin, 0.0))
        ROS_WARN(" TMOVE : Param Ki_lin not found, set to 0");
    double Kd_lin;
    if (!nh.param("Kd_lin", Kd_lin, 0.0))
        ROS_WARN(" TMOVE : Param Kd_lin not found, set to 0");
    double max_lin_vel;
    if (!nh.param("max_lin_vel", max_lin_vel, 0.22))
        ROS_WARN(" TMOVE : Param max_lin_vel not found, set to 0.22");
    double max_lin_acc;
    if (!nh.param("max_lin_acc", max_lin_acc, 1.0))
        ROS_WARN(" TMOVE : Param max_lin_acc not found, set to 1");
    double Kp_ang;
    if (!nh.param("Kp_ang", Kp_ang, 1.0))
        ROS_WARN(" TMOVE : Param Kp_ang not found, set to 1.0");
    double Ki_ang;
    if (!nh.param("Ki_ang", Ki_ang, 0.0))
        ROS_WARN(" TMOVE : Param Ki_ang not found, set to 0");
    double Kd_ang;
    if (!nh.param("Kd_ang", Kd_ang, 0.0))
        ROS_WARN(" TMOVE : Param Kd_ang not found, set to 0");
    double max_ang_vel;
    if (!nh.param("max_ang_vel", max_ang_vel, 2.84))
        ROS_WARN(" TMOVE : Param max_ang_vel not found, set to 2.84");
    double max_ang_acc;
    if (!nh.param("max_ang_acc", max_ang_acc, 4.0))
        ROS_WARN(" TMOVE : Param max_ang_acc not found, set to 4");
    double move_iter_rate;
    if (!nh.param("move_iter_rate", move_iter_rate, 25.0))
        ROS_WARN(" TMOVE : Param move_iter_rate not found, set to 25");

    // Subscribers
    ros::Subscriber sub_target = nh.subscribe("target", 1, &cbTarget);
    ros::Subscriber sub_pose = nh.subscribe("pose", 1, &cbPose);

    // Publishers
    ros::Publisher pub_cmd = nh.advertise<geometry_msgs::Twist>("cmd_vel", 1, true);
    
    // prepare published messages
    geometry_msgs::Twist msg_cmd; // all properties are initialised to zero.
    
    // Setup rate
    ros::Rate rate(move_iter_rate); // same as publishing rate of pose topic

    // wait for other nodes to load
    ROS_INFO(" TMOVE : Waiting for topics");
    while (ros::ok() && nh.param("run", true) && ang_rbt == 10) // not dependent on main.cpp, but on motion.cpp
    {
        rate.sleep();
        ros::spinOnce(); //update the topics
    }

    // Setup variables
    double cmd_lin_vel = 0, cmd_ang_vel = 0;
    double dt;
    double prev_time = ros::Time::now().toSec();

    ////////////////// DECLARE VARIABLES HERE //////////////////

    //Linear Variables
    double oldpos_error = sqrt(pow((target.y - pos_rbt.y),2)+pow((target.x - pos_rbt.x),2));
    double poserror_t = 0;
    double pos_error = 0;
    double P = 0, I = 0, D = 0, u = 0; 

    //Angular Variables
    double oldang_error = limit_angle(heading(pos_rbt, target)-ang_rbt), angerror_t = 0;
    double ang_error = 0;
    double P_ang = 0, I_ang = 0, D_ang = 0, u_ang = 0;
    
    ROS_INFO(" TMOVE : ===== BEGIN =====");

    // main loop
    if (enable_move)
    {
        while (ros::ok() && nh.param("run", true))
        {
            // update all topics
            ros::spinOnce();

            dt = ros::Time::now().toSec() - prev_time;
            if (dt == 0) // ros doesn't tick the time fast enough
                continue;
            prev_time += dt;

            ////////////////// MOTION CONTROLLER HERE //////////////////
            double diffy = target.y - pos_rbt.y;
            double diffx = target.x - pos_rbt.x;

            //Linear-Velocity Control

            //For Tuning - to also comment out sqrt() line & double diffy & double diffx lines
            //pos_error = target.x - pos_rbt.x;

            pos_error = sqrt(pow(diffy,2)+pow(diffx,2));

            //Angular-Velocity Control
            double angle = atan2(diffy,diffx) - ang_rbt;
            ang_error = limit_angle(angle);

            //PID - Linear            
            P = Kp_lin*pos_error;
            poserror_t += pos_error;
            I = Ki_lin * poserror_t; 
            D = Kd_lin *((pos_error - oldpos_error)/dt);
            oldpos_error = pos_error;
            
            u = P + I + D;

            //Tuning Kp Kd for Linear Velocity - Experiment
            // double est_acc = (u - cmd_lin_vel)/dt;
            // cmd_lin_vel = cmd_lin_vel + (est_acc*dt);

            // //Constraining Linear Velocity
            double est_acc = (u - cmd_lin_vel)/dt;
            double sat_acc = sat(est_acc, max_lin_acc);
            cmd_lin_vel = sat((cmd_lin_vel+(sat_acc*dt)),max_lin_vel);

            //PID - Angular 
            P_ang = Kp_ang * ang_error;
            angerror_t += ang_error;            
            I_ang = Ki_ang * angerror_t;
            D_ang = Kd_ang *((ang_error - oldang_error)/dt);
            oldang_error = ang_error;
            u_ang = P_ang + I_ang + D_ang;

            //Tuning Kp Kd for Angular Velocity - Experiment
            // double est_angacc = (u_ang - cmd_ang_vel)/dt;
            // cmd_ang_vel = cmd_ang_vel + (est_angacc*dt);

            // //Constraining Angular Velocity
            double est_angacc = (u_ang - cmd_ang_vel)/dt;
            double sat_angacc = sat(est_angacc, max_ang_acc);
            cmd_ang_vel = sat((cmd_ang_vel+(sat_angacc*dt)),max_ang_vel);

            // publish speeds
            msg_cmd.linear.x = cmd_lin_vel;
            msg_cmd.angular.z = cmd_ang_vel;
            
            //msg_cmd.linear.x = 0;
            //msg_cmd.angular.z = 0;
            pub_cmd.publish(msg_cmd);

            // verbose
            if (verbose)
            {
                ROS_INFO(" TMOVE :  FV(%6.3f) AV(%6.3f)", cmd_lin_vel, cmd_ang_vel);
                ROS_INFO(" CHECKPOSE : TARGET_POS(%6.3f,%6.3f) POS_X(%6.3f) POS_ERROR(%6.3f)", target.x, target.y, pos_rbt.x, pos_error  );
                ROS_INFO(" CHECK ANGULAR: ANG(%6.3f) ANG_ERROR(%6.3f)", ang_rbt, ang_error);

                //Write/Obtain readings to Excel
                data_file << ros::Time::now().toSec() << "\t" << target.x << "\t" << target.y << "\t" << pos_rbt.x << "\t" << pos_rbt.y << "\t" << pos_error << "\t" << cmd_lin_vel << std::endl;
                //data_file << ros::Time::now().toSec() << "\t" << target.x << "\t" << target.y << "\t" << pos_rbt.y << "\t" << ang_rbt << "\t" << ang_error << "\t" << cmd_ang_vel << std::endl;
            }

            // wait for rate
            rate.sleep();
        }
    }

    // attempt to stop the motors (does not work if ros wants to shutdown)
    msg_cmd.linear.x = 0;
    msg_cmd.angular.z = 0;
    pub_cmd.publish(msg_cmd);

    ROS_INFO(" TMOVE : ===== END =====");
    return 0;
}